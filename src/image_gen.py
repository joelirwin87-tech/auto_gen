"""Image generation utilities built around Kandinsky-3."""
from __future__ import annotations

import logging
from pathlib import Path
from typing import List

import torch
from kandinsky3 import get_T2I_pipeline

logger = logging.getLogger(__name__)


def _resolve_device(requested_device: str) -> str:
    """Return a valid torch device string, falling back to CPU when necessary."""
    if requested_device and requested_device != "cpu":
        if torch.cuda.is_available():
            return requested_device
        logger.warning("CUDA requested but not available. Falling back to CPU.")
    return "cpu"


def _ensure_output_path(path: Path) -> Path:
    """Create parent directories for the output path if needed."""
    if not path.parent.exists():
        path.parent.mkdir(parents=True, exist_ok=True)
    return path


def _save_first_image(images: List, output_path: Path) -> Path:
    """Persist the first PIL image from the list to disk as PNG."""
    if not images:
        raise ValueError("No images were generated by the pipeline.")
    image = images[0]
    image.save(output_path, format="PNG")
    return output_path


def generate_image(prompt: str, output_path: str, device: str = "cuda:0") -> str:
    """Generate an image using Kandinsky-3 and persist it to ``output_path``."""
    if not isinstance(prompt, str) or not prompt.strip():
        raise ValueError("prompt must be a non-empty string.")
    if not isinstance(output_path, str) or not output_path.strip():
        raise ValueError("output_path must be a non-empty string path.")

    output_file = _ensure_output_path(Path(output_path).expanduser().resolve())
    selected_device = _resolve_device(device)

    dtype_map = {
        "unet": torch.float32,
        "text_encoder": torch.float16,
        "movq": torch.float32,
    }

    try:
        pipeline = get_T2I_pipeline(device=selected_device, dtype_map=dtype_map)
        images = pipeline.generate_text2img(
            prompt=prompt,
            batch_size=1,
        )
        saved_path = _save_first_image(images, output_file)
        return str(saved_path)
    except Exception as exc:  # pragma: no cover - defensive logging
        logger.error("Failed to generate image with Kandinsky-3: %s", exc, exc_info=True)
        raise
